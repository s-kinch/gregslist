{"version":3,"sources":["data.js","components/Categories.js","components/LeftBar.js","App.js","serviceWorker.js","index.js"],"names":["Electrician","name","number","Plumber","Drywall","Roofing","Tile","HVAC","Windows","Granite","Contractor","Fence","column","categories","className","map","categoryName","listings","key","toLowerCase","arr","split","concat","slice","e","length","searchText","setSearchText","placeholder","value","onChange","target","trim","App","useState","filteredData","Object","entries","data","reduce","acc","current","includes","nameMatches","filter","x","entry","LeftBar","Categories","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c9a7c1e.chunk.js","sourcesContent":["export default {\n    Electrician: [\n        {\n            name: 'Pat Crosby',\n            number: '513-702-9459',\n        },\n        {\n            name: 'Todd McIntosh',\n            number: '937-716-9510',\n        },\n    ],\n    Plumber: [\n        {\n            name: 'Jeff Lipscomb',\n            number: '513-309-8087', // TODO: check number\n        },\n    ],\n    Drywall: [\n        {\n            name: 'Greg Harrison',\n            number: '513-668-6102',\n        },\n        {\n            name: 'Manuel',\n            number: '513-807-9843',\n        },\n        {\n            name: 'Dave Robinson',\n            number: '513-461-5850',\n        },\n    ],\n    Roofing: [\n        {\n            name: 'Lilo', // TODO: check number\n            number: '513-623-1434',\n        },\n        {\n            name: 'Mike Allen', // TODO: check number\n            number: '513-237-0232',\n        },\n        {\n            name: 'Donovan McQueen', // TODO: check number\n            number: '513-939-9445',\n        },\n    ],\n    Tile: [\n        {\n            name: 'Joe Landock', // TODO: check name\n            number: '513-368-8983',\n        },\n    ],\n    HVAC: [\n        {\n            name: 'Miami Heating & Cooling',\n            number: '513-737-6841',\n        },\n        {\n            name: 'Donnie Smith',\n            number: '513-266-6667',\n        },\n    ],\n    Windows: [\n        {\n            name: 'Mike Allen',\n            number: '513-257-0232',\n        },\n    ],\n    'Glass Block': [\n        {\n            name: 'Cincinnati Glass Block',\n            number: '513-218-1468',\n        },\n    ],\n    'Kitchen/Bath Cabinetry': [\n        {\n            name: 'Sims Lohman', // TODO: check name\n            number: '513-471-5512',\n        },\n    ],\n    Granite: [\n        {\n            name: 'Pure Granite, Angela Esposito',\n            number: '513-771-7111',\n        },\n    ],\n    Contractor: [\n        {\n            name: 'Joe Haubner', // TODO: check name\n            number: '513-304-1763',\n        },\n        {\n            name: 'Steve Arent',\n            number: '513-255-0080',\n        },\n    ],\n    Fence: [\n        {\n            name: 'Brian Connaughton',\n            number: '513-623-6803',\n        },\n    ],\n}","import React from 'react'\n\nconst column = (categories) => <div className=\"column\">\n        {\n            categories.map(({categoryName, listings}) => <li className=\"category\" key={categoryName}>\n                    <div className=\"categorynamecontainer\"><h3>{categoryName.toLowerCase()}</h3></div>\n                    <table>\n                        <tbody>\n                            {listings.map(({name, number}) => {\n                                const arr = name.toLowerCase().split(', ')\n                                return <tr key={name}>\n                                    <td>{[arr[0]].concat(...arr.slice(1).map(e => [<br/>, e]))}</td>\n                                    <td>{number}</td>\n                                </tr>\n                            })}\n                        </tbody>\n                    </table>\n                </li>\n            )\n        }\n    </div>\n\nexport default ({categories}) => <div className=\"categories\">\n    <div className=\"city\"><h2>hamilton, OH</h2></div>\n    <ul className=\"categorylist\">\n        {column(categories.slice(0, categories.length / 2))}\n        {column(categories.slice(categories.length / 2))}\n    </ul>\n</div>\n    ","import React from 'react'\n\nexport default ({searchText, setSearchText}) => <div className=\"leftbar\">\n    <h1>gregslist</h1>\n    <p>greg's recommendations for home improvement contractors</p>\n    <input placeholder=\"search gregslist\" value={searchText} onChange={(e) => setSearchText(e.target.value.toLowerCase().trim())}/>\n</div>","import React, { useState } from 'react'\nimport './App.scss'\nimport data from './data'\nimport Categories from './components/Categories'\nimport LeftBar from './components/LeftBar'\n\nfunction App() {\n    const [searchText, setSearchText] = useState('')\n    // setting searchText already lowercased & trimmed\n\n    const filteredData = (!searchText ? Object.entries(data) : Object.entries(data).reduce((acc, current) => {\n            if (current[0].toLowerCase().includes(searchText)) return [...acc, current]\n            else {\n                const nameMatches = current[1].filter(x => x.name.toLowerCase().includes(searchText))\n                if (nameMatches.length > 0) return [...acc, [current[0], nameMatches]]\n                else return acc\n            }\n        }, []))\n        .map(entry => ({ categoryName: entry[0], listings: entry[1] }))\n\n    return (\n        <div className=\"App\">\n            <LeftBar setSearchText={setSearchText} searchText={searchText} />\n            <Categories categories={filteredData} />\n        </div>\n    )\n}\n\nexport default App\n\n// TODO: favicon","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}